"use strict";
/**
 * @module vite-plugin-glsl
 * @description Import shader file chunks
 * @author Ustym Ukhman <ustym.ukhman@gmail.com>
 * @version 0.1.1
 * @license MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const loadShaders_1 = (0, tslib_1.__importDefault)(require("./loadShaders"));
const pluginutils_1 = require("@rollup/pluginutils");
/**
 * @const
 * @default
 * @type {string}
 */
const DEFAULT_EXTENSION = 'glsl';
/**
 * @const
 * @default
 * @type {readonly RegExp[]}
 */
const DEFAULT_SHADERS = Object.freeze([
    '**/*.glsl', '**/*.wgsl',
    '**/*.vert', '**/*.frag',
    '**/*.vs', '**/*.fs'
]);
/**
 * @function
 * @name glsl
 *
 * @param {FilterPattern} exclude RegExp | RegExp[] of file paths/extentions to ignore
 * @param {FilterPattern} include RegExp | RegExp[] of file paths/extentions to import
 * @param {string} defaultExtension Shader import suffix when no extension is specified
 *
 * @default
 *   exclude = undefined
 *   include = /\.(glsl|wgsl|vert|frag|vs|fs)$/i
 *   defaultExtension = 'glsl'
 *
 * @returns {Plugin}
 */
function default_1(exclude, include = DEFAULT_SHADERS, defaultExtension = DEFAULT_EXTENSION) {
    const filter = (0, pluginutils_1.createFilter)(include, exclude);
    return {
        enforce: 'pre',
        name: 'vite-plugin-glsl',
        transform(source, shader) {
            if (filter(shader)) {
                return (0, pluginutils_1.dataToEsm)((0, loadShaders_1.default)(source, shader, defaultExtension));
            }
        }
    };
}
exports.default = default_1;
//# sourceMappingURL=index.js.map